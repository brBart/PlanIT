<?php

/*
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  
 * � Copyright 2012 BEN GHMISS Nassim �  
 * 
 */

namespace Flyers\PlanITBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * AssignmentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AssignmentRepository extends EntityRepository
{
	public function findAllByParent()
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		$qb	->select('a')
			->from('PlanITBundle:Assignment', 'a')
			->leftjoin('a.parent', 'c')
			->orderBy('c.idassignment', 'ASC');
		return $qb->getQuery()->getResult();
	}
	
	public function findAllByProject($idproject)
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		$qb	->select('a')
			->from('PlanITBundle:Assignment', 'a')
			->where('a.project = :id')
			->leftjoin('a.parent', 'c')
			->orderBy('a.parent', 'ASC')
			->setParameter('id', $idproject);
		return $qb->getQuery()->getResult();
	}
	
	public function findAllByUser($user)
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		$qb	->select('a')
			->from('PlanITBundle:Assignment', 'a')
			->join('a.project', 'p')
			->where($qb->expr()->andx('a.project = p.idproject', 'p.user = :id'))
			->leftjoin('a.parent', 'c')
			->orderBy('c.idassignment', 'ASC')
			->setParameter('id', $user->getId() );
		return $qb->getQuery()->getResult();
	}
	
	public function findAllByUserQuery($user)
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		$qb	->select('a')
			->from('PlanITBundle:Assignment', 'a')
			->join('a.project', 'p')
			->where($qb->expr()->andx('a.project = p.idproject', 'p.user = :id'))
			->leftjoin('a.parent', 'c')
			->orderBy('c.idassignment', 'ASC')
			->setParameter('id', $user->getId() );
		return $qb;
	}
	
	public function countPersons($idassignment)
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		$qb	->select($qb->expr()->count('p'))
			->from('PlanITBundle:Assignment', 'a')
			->where('a.idassignment = :id')
			->join('a.persons', 'p')
			->groupBy('p.idperson')
			->setParameter('id', $idassignment);
		return $qb->getQuery()->getSingleScalarResult();
	}
	
	public function getSalaryForTask($idtask)
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		$qb	->select("SUM (p.salary)")
			->from("PlanITBundle:Assignment", "a")
			->join("a.persons", "p")
			->where("a.idassignment = :id" )
			->setParameter( "id", $idtask );
		return $qb->getQuery()->getSingleScalarResult();
	}
	
	public function getOccupyForPerson($idproject)
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		$qb	->select("SUM(a.duration)")
			->from("PlanITBundle:Assignment", "a")
			->where("a.project = :id" )
			->setParameter( "id", $idproject );
		var_dump($qb->getDql());
		return $qb->getQuery()->getSingleScalarResult();
	}
}